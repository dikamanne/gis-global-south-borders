{"ast":null,"code":"import * as React from 'react';\nimport { useContext, useEffect, useMemo, useState, useRef, cloneElement } from 'react';\nimport { MapContext } from \"./map.js\";\nimport assert from \"../utils/assert.js\";\nimport { deepEqual } from \"../utils/deep-equal.js\";\nlet sourceCounter = 0;\nfunction createSource(map, id, props) {\n  // @ts-ignore\n  if (map.style && map.style._loaded) {\n    const options = {\n      ...props\n    };\n    delete options.id;\n    delete options.children;\n    // @ts-ignore\n    map.addSource(id, options);\n    return map.getSource(id);\n  }\n  return null;\n}\n/* eslint-disable complexity */\nfunction updateSource(source, props, prevProps) {\n  assert(props.id === prevProps.id, 'source id changed');\n  assert(props.type === prevProps.type, 'source type changed');\n  let changedKey = '';\n  let changedKeyCount = 0;\n  for (const key in props) {\n    if (key !== 'children' && key !== 'id' && !deepEqual(prevProps[key], props[key])) {\n      changedKey = key;\n      changedKeyCount++;\n    }\n  }\n  if (!changedKeyCount) {\n    return;\n  }\n  const type = props.type;\n  if (type === 'geojson') {\n    source.setData(props.data);\n  } else if (type === 'image') {\n    source.updateImage({\n      url: props.url,\n      coordinates: props.coordinates\n    });\n  } else {\n    switch (changedKey) {\n      case 'coordinates':\n        // @ts-ignore\n        source.setCoordinates?.(props.coordinates);\n        break;\n      case 'url':\n        // @ts-ignore\n        source.setUrl?.(props.url);\n        break;\n      case 'tiles':\n        // @ts-ignore\n        source.setTiles?.(props.tiles);\n        break;\n      default:\n        // eslint-disable-next-line\n        console.warn(`Unable to update <Source> prop: ${changedKey}`);\n    }\n  }\n}\n/* eslint-enable complexity */\nexport function Source(props) {\n  const map = useContext(MapContext).map.getMap();\n  const propsRef = useRef(props);\n  const [, setStyleLoaded] = useState(0);\n  const id = useMemo(() => props.id || `jsx-source-${sourceCounter++}`, []);\n  useEffect(() => {\n    if (map) {\n      /* global setTimeout */\n      const forceUpdate = () => setTimeout(() => setStyleLoaded(version => version + 1), 0);\n      map.on('styledata', forceUpdate);\n      forceUpdate();\n      return () => {\n        map.off('styledata', forceUpdate);\n        // @ts-ignore\n        if (map.style && map.style._loaded && map.getSource(id)) {\n          // Parent effects are destroyed before child ones, see\n          // https://github.com/facebook/react/issues/16728\n          // Source can only be removed after all child layers are removed\n          const allLayers = map.getStyle()?.layers;\n          if (allLayers) {\n            for (const layer of allLayers) {\n              // @ts-ignore (2339) source does not exist on all layer types\n              if (layer.source === id) {\n                map.removeLayer(layer.id);\n              }\n            }\n          }\n          map.removeSource(id);\n        }\n      };\n    }\n    return undefined;\n  }, [map]);\n  // @ts-ignore\n  let source = map && map.style && map.getSource(id);\n  if (source) {\n    updateSource(source, props, propsRef.current);\n  } else {\n    source = createSource(map, id, props);\n  }\n  propsRef.current = props;\n  return source && React.Children.map(props.children, child => child && cloneElement(child, {\n    source: id\n  })) || null;\n}","map":{"version":3,"names":["React","useContext","useEffect","useMemo","useState","useRef","cloneElement","MapContext","assert","deepEqual","sourceCounter","createSource","map","id","props","style","_loaded","options","children","addSource","getSource","updateSource","source","prevProps","type","changedKey","changedKeyCount","key","setData","data","updateImage","url","coordinates","setCoordinates","setUrl","setTiles","tiles","console","warn","Source","getMap","propsRef","setStyleLoaded","forceUpdate","setTimeout","version","on","off","allLayers","getStyle","layers","layer","removeLayer","removeSource","undefined","current","Children","child"],"sources":["/Users/dikamanne/gis-global-south-borders/global-south-gis/frontend/node_modules/@vis.gl/react-maplibre/src/components/source.ts"],"sourcesContent":["import * as React from 'react';\nimport {useContext, useEffect, useMemo, useState, useRef, cloneElement} from 'react';\nimport {MapContext} from './map';\nimport assert from '../utils/assert';\nimport {deepEqual} from '../utils/deep-equal';\n\nimport type {\n  GeoJSONSourceImplementation,\n  ImageSourceImplementation,\n  AnySourceImplementation\n} from '../types/internal';\nimport type {SourceSpecification} from '../types/style-spec';\nimport type {MapInstance} from '../types/lib';\n\nexport type SourceProps = SourceSpecification & {\n  id?: string;\n  children?: any;\n};\n\nlet sourceCounter = 0;\n\nfunction createSource(map: MapInstance, id: string, props: SourceProps) {\n  // @ts-ignore\n  if (map.style && map.style._loaded) {\n    const options = {...props};\n    delete options.id;\n    delete options.children;\n    // @ts-ignore\n    map.addSource(id, options);\n    return map.getSource(id);\n  }\n  return null;\n}\n\n/* eslint-disable complexity */\nfunction updateSource(source: AnySourceImplementation, props: SourceProps, prevProps: SourceProps) {\n  assert(props.id === prevProps.id, 'source id changed');\n  assert(props.type === prevProps.type, 'source type changed');\n\n  let changedKey = '';\n  let changedKeyCount = 0;\n\n  for (const key in props) {\n    if (key !== 'children' && key !== 'id' && !deepEqual(prevProps[key], props[key])) {\n      changedKey = key;\n      changedKeyCount++;\n    }\n  }\n\n  if (!changedKeyCount) {\n    return;\n  }\n\n  const type = props.type;\n\n  if (type === 'geojson') {\n    (source as GeoJSONSourceImplementation).setData(props.data);\n  } else if (type === 'image') {\n    (source as ImageSourceImplementation).updateImage({\n      url: props.url,\n      coordinates: props.coordinates\n    });\n  } else {\n    switch (changedKey) {\n      case 'coordinates':\n        // @ts-ignore\n        source.setCoordinates?.(props.coordinates);\n        break;\n      case 'url':\n        // @ts-ignore\n        source.setUrl?.(props.url);\n        break;\n      case 'tiles':\n        // @ts-ignore\n        source.setTiles?.(props.tiles);\n        break;\n      default:\n        // eslint-disable-next-line\n        console.warn(`Unable to update <Source> prop: ${changedKey}`);\n    }\n  }\n}\n/* eslint-enable complexity */\n\nexport function Source(props: SourceProps) {\n  const map = useContext(MapContext).map.getMap();\n  const propsRef = useRef(props);\n  const [, setStyleLoaded] = useState(0);\n\n  const id = useMemo(() => props.id || `jsx-source-${sourceCounter++}`, []);\n\n  useEffect(() => {\n    if (map) {\n      /* global setTimeout */\n      const forceUpdate = () => setTimeout(() => setStyleLoaded(version => version + 1), 0);\n      map.on('styledata', forceUpdate);\n      forceUpdate();\n\n      return () => {\n        map.off('styledata', forceUpdate);\n        // @ts-ignore\n        if (map.style && map.style._loaded && map.getSource(id)) {\n          // Parent effects are destroyed before child ones, see\n          // https://github.com/facebook/react/issues/16728\n          // Source can only be removed after all child layers are removed\n          const allLayers = map.getStyle()?.layers;\n          if (allLayers) {\n            for (const layer of allLayers) {\n              // @ts-ignore (2339) source does not exist on all layer types\n              if (layer.source === id) {\n                map.removeLayer(layer.id);\n              }\n            }\n          }\n          map.removeSource(id);\n        }\n      };\n    }\n    return undefined;\n  }, [map]);\n\n  // @ts-ignore\n  let source = map && map.style && map.getSource(id);\n  if (source) {\n    updateSource(source, props, propsRef.current);\n  } else {\n    source = createSource(map, id, props);\n  }\n  propsRef.current = props;\n\n  return (\n    (source &&\n      React.Children.map(\n        props.children,\n        child =>\n          child &&\n          cloneElement(child, {\n            source: id\n          })\n      )) ||\n    null\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}