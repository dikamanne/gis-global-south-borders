{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["/Users/dikamanne/node_modules/@vis.gl/react-maplibre/src/types/events.ts"],"sourcesContent":["import type {Point, LngLat, MapGeoJSONFeature, ViewState} from './common';\n\nimport type {\n  Map,\n  Marker,\n  Popup,\n  GeolocateControl,\n  MapLibreEvent,\n  MapMouseEvent as _MapMouseEvent,\n  MapLayerMouseEvent,\n  MapTouchEvent,\n  MapLayerTouchEvent,\n  MapStyleDataEvent,\n  MapSourceDataEvent,\n  MapWheelEvent,\n  MapLibreZoomEvent as MapBoxZoomEvent\n} from 'maplibre-gl';\n\nexport type {\n  MapLibreEvent as MapEvent,\n  MapLayerMouseEvent,\n  MapTouchEvent,\n  MapLayerTouchEvent,\n  MapStyleDataEvent,\n  MapSourceDataEvent,\n  MapWheelEvent,\n  MapBoxZoomEvent\n};\n\nexport type MapCallbacks = {\n  onMouseDown?: (e: MapLayerMouseEvent) => void;\n  onMouseUp?: (e: MapLayerMouseEvent) => void;\n  onMouseOver?: (e: MapLayerMouseEvent) => void;\n  onMouseMove?: (e: MapLayerMouseEvent) => void;\n  onClick?: (e: MapLayerMouseEvent) => void;\n  onDblClick?: (e: MapLayerMouseEvent) => void;\n  onMouseEnter?: (e: MapLayerMouseEvent) => void;\n  onMouseLeave?: (e: MapLayerMouseEvent) => void;\n  onMouseOut?: (e: MapLayerMouseEvent) => void;\n  onContextMenu?: (e: MapLayerMouseEvent) => void;\n  onTouchStart?: (e: MapLayerTouchEvent) => void;\n  onTouchEnd?: (e: MapLayerTouchEvent) => void;\n  onTouchMove?: (e: MapLayerTouchEvent) => void;\n  onTouchCancel?: (e: MapLayerTouchEvent) => void;\n\n  onMoveStart?: (e: ViewStateChangeEvent) => void;\n  onMove?: (e: ViewStateChangeEvent) => void;\n  onMoveEnd?: (e: ViewStateChangeEvent) => void;\n  onDragStart?: (e: ViewStateChangeEvent) => void;\n  onDrag?: (e: ViewStateChangeEvent) => void;\n  onDragEnd?: (e: ViewStateChangeEvent) => void;\n  onZoomStart?: (e: ViewStateChangeEvent) => void;\n  onZoom?: (e: ViewStateChangeEvent) => void;\n  onZoomEnd?: (e: ViewStateChangeEvent) => void;\n  onRotateStart?: (e: ViewStateChangeEvent) => void;\n  onRotate?: (e: ViewStateChangeEvent) => void;\n  onRotateEnd?: (e: ViewStateChangeEvent) => void;\n  onPitchStart?: (e: ViewStateChangeEvent) => void;\n  onPitch?: (e: ViewStateChangeEvent) => void;\n  onPitchEnd?: (e: ViewStateChangeEvent) => void;\n\n  onWheel?: (e: MapWheelEvent) => void;\n  onBoxZoomStart?: (e: MapBoxZoomEvent) => void;\n  onBoxZoomEnd?: (e: MapBoxZoomEvent) => void;\n  onBoxZoomCancel?: (e: MapBoxZoomEvent) => void;\n\n  onResize?: (e: MapLibreEvent) => void;\n  onLoad?: (e: MapLibreEvent) => void;\n  onRender?: (e: MapLibreEvent) => void;\n  onIdle?: (e: MapLibreEvent) => void;\n  onError?: (e: ErrorEvent) => void;\n  onRemove?: (e: MapLibreEvent) => void;\n  onData?: (e: MapStyleDataEvent | MapSourceDataEvent) => void;\n  onStyleData?: (e: MapStyleDataEvent) => void;\n  onSourceData?: (e: MapSourceDataEvent) => void;\n};\n\ninterface MapEvent<SourceT, OriginalEventT = undefined> {\n  type: string;\n  target: SourceT;\n  originalEvent: OriginalEventT;\n}\n\nexport type ErrorEvent = MapEvent<Map> & {\n  type: 'error';\n  error: Error;\n};\n\nexport type MapMouseEvent = _MapMouseEvent & {\n  point: Point;\n  lngLat: LngLat;\n  features?: MapGeoJSONFeature[];\n};\n\nexport type ViewStateChangeEvent =\n  | (MapEvent<Map, MouseEvent | TouchEvent | WheelEvent | undefined> & {\n      type: 'movestart' | 'move' | 'moveend' | 'zoomstart' | 'zoom' | 'zoomend';\n      viewState: ViewState;\n    })\n  | (MapEvent<Map, MouseEvent | TouchEvent | undefined> & {\n      type:\n        | 'rotatestart'\n        | 'rotate'\n        | 'rotateend'\n        | 'dragstart'\n        | 'drag'\n        | 'dragend'\n        | 'pitchstart'\n        | 'pitch'\n        | 'pitchend';\n      viewState: ViewState;\n    });\n\nexport type PopupEvent = {\n  type: 'open' | 'close';\n  target: Popup;\n};\n\nexport type MarkerEvent<OriginalEventT = undefined> = MapEvent<Marker, OriginalEventT>;\n\nexport type MarkerDragEvent = MarkerEvent & {\n  type: 'dragstart' | 'drag' | 'dragend';\n  lngLat: LngLat;\n};\n\nexport type GeolocateEvent = MapEvent<GeolocateControl>;\n\nexport type GeolocateResultEvent = GeolocateEvent & GeolocationPosition;\n\nexport type GeolocateErrorEvent = GeolocateEvent & GeolocationPositionError;\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}