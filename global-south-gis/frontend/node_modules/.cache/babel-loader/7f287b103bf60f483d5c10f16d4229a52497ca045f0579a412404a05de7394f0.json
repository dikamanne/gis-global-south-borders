{"ast":null,"code":"export default function setGlobals(mapLib, props) {\n  const {\n    RTLTextPlugin,\n    maxParallelImageRequests,\n    workerCount,\n    workerUrl\n  } = props;\n  if (RTLTextPlugin && mapLib.getRTLTextPluginStatus && mapLib.getRTLTextPluginStatus() === 'unavailable') {\n    const {\n      pluginUrl,\n      lazy = true\n    } = typeof RTLTextPlugin === 'string' ? {\n      pluginUrl: RTLTextPlugin\n    } : RTLTextPlugin;\n    mapLib.setRTLTextPlugin(pluginUrl, error => {\n      if (error) {\n        // eslint-disable-next-line\n        console.error(error);\n      }\n    }, lazy);\n  }\n  if (maxParallelImageRequests !== undefined) {\n    mapLib.setMaxParallelImageRequests(maxParallelImageRequests);\n  }\n  if (workerCount !== undefined) {\n    mapLib.setWorkerCount(workerCount);\n  }\n  if (workerUrl !== undefined) {\n    mapLib.setWorkerUrl(workerUrl);\n  }\n}","map":{"version":3,"names":["setGlobals","mapLib","props","RTLTextPlugin","maxParallelImageRequests","workerCount","workerUrl","getRTLTextPluginStatus","pluginUrl","lazy","setRTLTextPlugin","error","console","undefined","setMaxParallelImageRequests","setWorkerCount","setWorkerUrl"],"sources":["/Users/dikamanne/node_modules/@vis.gl/react-maplibre/src/utils/set-globals.ts"],"sourcesContent":["export type GlobalSettings = {\n  /** The maximum number of images (raster tiles, sprites, icons) to load in parallel.\n   * @default 16\n   */\n  maxParallelImageRequests?: number;\n  /** The map's RTL text plugin. Necessary for supporting the Arabic and Hebrew languages, which are written right-to-left.  */\n  RTLTextPlugin?: string | {pluginUrl: string; lazy?: boolean};\n  /** The number of web workers instantiated on a page with maplibre-gl maps.\n   * @default 2\n   */\n  workerCount?: number;\n  /** Provides an interface for loading maplibre-gl's WebWorker bundle from a self-hosted URL.\n   * This is useful if your site needs to operate in a strict CSP (Content Security Policy) environment\n   * wherein you are not allowed to load JavaScript code from a Blob URL, which is default behavior. */\n  workerUrl?: string;\n};\n\nexport default function setGlobals(mapLib: any, props: GlobalSettings) {\n  const {RTLTextPlugin, maxParallelImageRequests, workerCount, workerUrl} = props;\n  if (\n    RTLTextPlugin &&\n    mapLib.getRTLTextPluginStatus &&\n    mapLib.getRTLTextPluginStatus() === 'unavailable'\n  ) {\n    const {pluginUrl, lazy = true} =\n      typeof RTLTextPlugin === 'string' ? {pluginUrl: RTLTextPlugin} : RTLTextPlugin;\n\n    mapLib.setRTLTextPlugin(\n      pluginUrl,\n      (error?: Error) => {\n        if (error) {\n          // eslint-disable-next-line\n          console.error(error);\n        }\n      },\n      lazy\n    );\n  }\n  if (maxParallelImageRequests !== undefined) {\n    mapLib.setMaxParallelImageRequests(maxParallelImageRequests);\n  }\n  if (workerCount !== undefined) {\n    mapLib.setWorkerCount(workerCount);\n  }\n  if (workerUrl !== undefined) {\n    mapLib.setWorkerUrl(workerUrl);\n  }\n}\n"],"mappings":"AAiBA,eAAc,SAAUA,UAAUA,CAACC,MAAW,EAAEC,KAAqB;EACnE,MAAM;IAACC,aAAa;IAAEC,wBAAwB;IAAEC,WAAW;IAAEC;EAAS,CAAC,GAAGJ,KAAK;EAC/E,IACEC,aAAa,IACbF,MAAM,CAACM,sBAAsB,IAC7BN,MAAM,CAACM,sBAAsB,EAAE,KAAK,aAAa,EACjD;IACA,MAAM;MAACC,SAAS;MAAEC,IAAI,GAAG;IAAI,CAAC,GAC5B,OAAON,aAAa,KAAK,QAAQ,GAAG;MAACK,SAAS,EAAEL;IAAa,CAAC,GAAGA,aAAa;IAEhFF,MAAM,CAACS,gBAAgB,CACrBF,SAAS,EACRG,KAAa,IAAI;MAChB,IAAIA,KAAK,EAAE;QACT;QACAC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACtB;IACF,CAAC,EACDF,IAAI,CACL;EACH;EACA,IAAIL,wBAAwB,KAAKS,SAAS,EAAE;IAC1CZ,MAAM,CAACa,2BAA2B,CAACV,wBAAwB,CAAC;EAC9D;EACA,IAAIC,WAAW,KAAKQ,SAAS,EAAE;IAC7BZ,MAAM,CAACc,cAAc,CAACV,WAAW,CAAC;EACpC;EACA,IAAIC,SAAS,KAAKO,SAAS,EAAE;IAC3BZ,MAAM,CAACe,YAAY,CAACV,SAAS,CAAC;EAChC;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}